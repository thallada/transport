{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/node.png","webpack:///./src/LineConnection.ts","webpack:///./src/utils.ts","webpack:///./src/Direction.ts","webpack:///./src/Station.ts","webpack:///./src/Line.ts","webpack:///./src/Train.ts","webpack:///./src/transport.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","110","t","e","LineConnection","[object Object]","station","line","this","utils_randomInt","min","max","Math","floor","random","utils_weightedRandom","choices","weights","totalWeight","reduce","a","b","rand","cumulWeight","utils_randomPoint","lib","Point","innerWidth","innerHeight","utils_pointsAlmostEqual","pointA","pointB","abs","x","y","utils_distance","distX","distY","sqrt","utils_rangeMap","num","inMin","inMax","outMin","outMax","Direction_Direction","Direction","North","Northeast","East","Southeast","South","Southwest","West","Northwest","Direction_getPointDirection","angle","atan2","PI","utils_angleDegrees","direction","Error","Station_stationCount","Station_Station","stations","largest","population","point","radius","filter","location","prev","curr","closeStations","stationsWithinRadius","closeStationWeights","map","minDistance","tries","isPointDistant","color","connections","id","label","PIXI","Text","fill","fontFamily","fontSize","Line_CONNECTION_RADIUS","pow","Line_Line","currentStation","visitedStations","connectionLimit","otherStations","largestStation","indexOf","connectedStation","connectStations","trainCount","Train","speed","passengers","origin","destination","sprite","Sprite","loader","resources","nodeImg","texture","add","node","load","app","Application","antialias","height","width","viewport","dist_viewport","screenHeight","screenWidth","worldHeight","worldWidth","stats","stats_min","showPanel","document","body","appendChild","dom","ticker","Ticker","graphics","Graphics","numStations","randomDistantPoint","tinycolor","trains","numLines","lines","isDark","stationsWithoutConnections","centralHub","stationsLeft","numTrains","stationsWithConnections","originStation","stop","deltaTime","begin","train","conn","boardingPassengers","mix","round","disembarkingPassengers","journeyLeft","progress","clear","lineStyle","beginFill","parseInt","toHex","drawCircle","endFill","scale","tint","connection","twoWay","moveTo","lineTo","end","start","addChild","view","stage","drag","pinch","wheel","clampZoom","maxHeight","maxWidth","minHeight","minWidth","decelerate","addEventListener","renderer","resize"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([110,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"726c2296b05703758a8f65fd9097f683.png\";","import Line from './Line';\nimport Station from './Station';\n\nexport default class LineConnection {\n  public station: Station;\n  public line: Line;\n\n  constructor(\n    station: Station,\n    line: Line,\n  ) {\n    this.station = station;\n    this.line = line;\n  }\n}\n","import * as PIXI from 'pixi.js';\n\nconst EPSILON = 1.0;\n\nexport const randomInt = (min: number, max: number): number => (\n  // inclusive of min and max\n  Math.floor(Math.random() * (max - (min + 1))) + min\n);\n\nexport const weightedRandom = (choices: any[], weights: number[]): any => {\n  const totalWeight = weights.reduce((a, b) => a + b, 0);\n  const rand = randomInt(0, totalWeight);\n  let cumulWeight = 0;\n  for (let i = 0; i < weights.length; i += 1) {\n    cumulWeight += weights[i];\n    if (rand < cumulWeight) {\n      return choices[i];\n    }\n  }\n};\n\nexport const randomPoint = () => (\n  new PIXI.Point(randomInt(0, window.innerWidth), randomInt(0, window.innerHeight))\n);\n\nexport const pointsEqual = (pointA: PIXI.Point, pointB: PIXI.Point): boolean => (\n  (pointA.x === pointB.x && pointA.y === pointB.y)\n);\n\nexport const pointsAlmostEqual = (pointA: PIXI.Point, pointB: PIXI.Point): boolean => (\n  Math.abs(pointA.x - pointB.x) < EPSILON &&\n  Math.abs(pointA.y - pointB.y) < EPSILON\n);\n\nexport const distance = (pointA: PIXI.Point, pointB: PIXI.Point): number => {\n  const distX = pointA.x - pointB.x;\n  const distY = pointA.y - pointB.y;\n  return Math.sqrt((distX * distX) + (distY * distY));\n};\n\nexport const rangeMap = (num: number, inMin: number, inMax: number,\n                         outMin: number, outMax: number): number => (\n  (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n);\n\nexport const angleRadians = (pointA: PIXI.Point, pointB: PIXI.Point): number => (\n  Math.atan2(-(pointB.x - pointA.x), pointB.y - pointA.y)\n);\n\nexport const angleDegrees = (pointA: PIXI.Point, pointB: PIXI.Point): number => (\n  180 + angleRadians(pointA, pointB) * (180 / Math.PI)\n);\n","import * as PIXI from 'pixi.js';\n\nimport { angleDegrees } from './utils';\n\nenum Direction {\n  North, // 0\n  Northeast, // 1\n  East, // 2\n  Southeast, // 3\n  South, // 4\n  Southwest, // 5\n  West, // 6\n  Northwest, // 7\n}\n\nexport const getPointDirection = (pointA: PIXI.Point, pointB: PIXI.Point): Direction => {\n  const angle = angleDegrees(pointA, pointB);\n  let direction = null;\n  if (angle >= 337.5 || angle < 22.5) {\n    direction = Direction.North;\n  } else if (angle >= 22.5 && angle < 67.5) {\n    direction = Direction.Northeast;\n  } else if (angle >= 67.5 && angle < 112.5) {\n    direction = Direction.East;\n  } else if (angle >= 112.5 && angle < 157.5) {\n    direction = Direction.Southeast;\n  } else if (angle >= 157.5 && angle < 202.5) {\n    direction = Direction.South;\n  } else if (angle >= 202.5 && angle < 247.5) {\n    direction = Direction.Southwest;\n  } else if (angle >= 247.5 && angle < 292.5) {\n    direction = Direction.West;\n  } else if (angle >= 292.5 && angle < 337.5) {\n    direction = Direction.Northwest;\n  } else {\n    throw Error('Angle between points is not a valid degree');\n  }\n  return direction;\n};\n\nexport default Direction;\n","import * as tinycolor from 'tinycolor2';\n\nimport Direction, { getPointDirection } from './Direction';\nimport LineConnection from './LineConnection';\nimport { distance, randomPoint, weightedRandom } from './utils';\n\nlet stationCount = 0;\n\nexport default class Station {\n  // Utility methods for working with arrays of Stations\n  public static largestStation(stations: Station[]): Station {\n    let largest: Station = null;\n    for (const station of stations) {\n      if (largest === null || station.population > largest.population) {\n        largest = station;\n      }\n    }\n    return largest;\n  }\n\n  public static stationsWithinRadius(stations: Station[], point: PIXI.Point,\n                                     radius: number): Station[] {\n    return stations.filter(station => distance(point, station.location) <= radius);\n  }\n\n  public static stationsInDirection(stations: Station[], point: PIXI.Point,\n                                    direction: Direction): Station[] {\n    return stations.filter(station => getPointDirection(point, station.location) === direction);\n  }\n\n  public static closestStation(stations: Station[], point: PIXI.Point): Station {\n    return stations.reduce(\n      (prev, curr) => distance(point, prev.location) < distance(point, curr.location) ? prev : curr,\n    );\n  }\n\n  public static randomCloseLargeStation(stations: Station[], point: PIXI.Point,\n                                        radius: number): Station {\n    const closeStations = Station.stationsWithinRadius(stations, point,\n                                                       radius);\n    const closeStationWeights = closeStations.map(station => station.population);\n    return weightedRandom(closeStations, closeStationWeights);\n  }\n\n  public static isPointDistant(point: PIXI.Point, stations: Station[],\n                               minDistance: number): boolean {\n    for (const station of stations) {\n      if (distance(point, station.location) < minDistance) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static randomDistantPoint(stations: Station[], minDistance: number): PIXI.Point | null {\n    let tries = 100;\n    while (tries > 0) {\n      const point = randomPoint();\n      if (Station.isPointDistant(point, stations, minDistance)) {\n        return point;\n      }\n      tries -= 1;\n    }\n    return null;\n  }\n\n  public location: PIXI.Point;\n  public population: number;\n  public connections: LineConnection[];\n  public id: number;\n  public label: PIXI.Text;\n  public color: tinycolorInstance;\n\n  constructor(\n    location: PIXI.Point,\n    population: number,\n    color: tinycolorInstance,\n    connections?: LineConnection[],\n  ) {\n    this.location = location;\n    this.population = population;\n    this.color = color;\n    this.connections = connections || [];\n\n    // for debugging\n    stationCount += 1;\n    this.id = stationCount;\n    this.label = new PIXI.Text(`${this.id}`, {\n      fill: '#FFA500',\n      fontFamily: 'monospace',\n      fontSize: '12px',\n    });\n  }\n}\n","import * as tinycolor from 'tinycolor2';\n\nimport Direction, { getPointDirection } from './Direction';\nimport LineConnection from './LineConnection';\nimport Station from './Station';\nimport { distance, randomInt, randomPoint } from './utils';\n\nconst CONNECTION_RADIUS = Math.floor(Math.sqrt(\n  Math.pow(window.innerWidth, 2) + Math.pow(window.innerHeight, 2),\n) / 8);\n\nexport default class Line {\n  public name: string;\n  public color: tinycolorInstance;\n\n  constructor(\n    name: string,\n    color: tinycolorInstance,\n  ) {\n    this.name = name;\n    this.color = color;\n  }\n\n  public connectStations(\n    currentStation: Station,\n    stations: Station[],\n    visitedStations: Station[],\n    connectionLimit: number,\n  ) {\n    visitedStations.push(currentStation);\n    const otherStations = stations.filter(station => station !== currentStation);\n    const closeStations = Station.stationsWithinRadius(\n      otherStations,\n      currentStation.location,\n      CONNECTION_RADIUS,\n    );\n    for (let i = 0; i < connectionLimit; i += 1) {\n      if (closeStations.length < 1) {\n        break;\n      }\n      const largest = Station.largestStation(closeStations);\n      currentStation.connections.push(\n        new LineConnection(largest, this),\n      );\n      closeStations.splice(closeStations.indexOf(largest), 1);\n    }\n    for (const connectedStation of currentStation.connections) {\n      if (visitedStations.indexOf(connectedStation.station) === -1) {\n        this.connectStations(\n          connectedStation.station,\n          stations,\n          visitedStations,\n          connectionLimit,\n        );\n      }\n    }\n  }\n}\n","import * as tinycolor from 'tinycolor2';\n\nimport Station from './Station';\n\nlet trainCount = 0;\n\nexport default class Train {\n  public location: PIXI.Point;\n  public speed: number;\n  public origin: Station;\n  public destination: Station;\n  public passengers: number;\n  public id: number;\n  public label: PIXI.Text;\n  public color: tinycolorInstance;\n  public sprite: PIXI.Sprite;\n\n  constructor(\n    location: PIXI.Point,\n    speed: number,\n    passengers: number,\n    origin: Station,\n    destination: Station,\n    color: tinycolorInstance,\n  ) {\n    this.location = location;\n    this.speed = speed;\n    this.origin = origin;\n    this.destination = destination;\n    this.passengers = passengers;\n    this.color = color;\n\n    this.sprite = new PIXI.Sprite(PIXI.loader.resources.nodeImg.texture);\n\n    // for debugging\n    trainCount += 1;\n    this.id = trainCount;\n    this.label = new PIXI.Text(`${this.id}`, {\n      fill: '#AEAEAE',\n      fontFamily: 'monospace',\n      fontSize: '12px',\n    });\n  }\n\n  public boardPassengers() {\n    if (this.location === this.origin.location) { // about to leave a station\n    }\n  }\n}\n","import * as Viewport from 'pixi-viewport';\nimport * as PIXI from 'pixi.js';\nimport * as Stats from 'stats.js';\nimport * as tinycolor from 'tinycolor2';\n\nimport Direction from './Direction';\nimport Line from './Line';\nimport Station from './Station';\nimport Train from './Train';\nimport { distance, pointsAlmostEqual, pointsEqual, randomInt, randomPoint,\n         rangeMap, weightedRandom } from './utils';\n\nimport * as imgNode from './node.png';\nimport './style.css';\n\nconst NODE_RES = 100;\n\nconst MAX_SPEED = 10.0;\nconst ACCELERATION = 0.025;\nconst APPROACH_DISTANCE = 3.0;\nconst TRAIN_CAPACITY = 50;\nconst LINE_CONNECTION_LIMIT = 5;\nconst WORLD_WIDTH = 1000;\nconst WORLD_HEIGHT = 1000;\nconst ZOOM_MIN_WIDTH = 100;\nconst ZOOM_MIN_HEIGHT = 100;\nconst ZOOM_MAX_WIDTH = 4000;\nconst ZOOM_MAX_HEIGHT = 4000;\n\nconst trainTexts: PIXI.Text[] = [];\n\nconst initStations = (numStations: number): Station[] => {\n  const stations: Station[] = [];\n  for (let i = 0; i < numStations; i += 1) {\n    stations.push(new Station(\n      Station.randomDistantPoint(stations, 30),\n      randomInt(300, 2000),\n      tinycolor.random()));\n  }\n  return stations;\n};\n\nconst initTrains = (numTrains: number, stations: Station[]): Train[] => {\n  const trains = [];\n  const stationsWithConnections = stations.filter(station => station.connections.length > 0);\n  for (let i = 0; i < numTrains; i += 1) {\n    const originStation = stationsWithConnections[\n      Math.floor(Math.random() * stationsWithConnections.length)\n    ];\n    trains.push(new Train(\n      new PIXI.Point(originStation.location.x, originStation.location.y),\n      0, 0, originStation, undefined, tinycolor('grey')),\n    );\n  }\n  return trains;\n};\n\nconst initLines = (numLines: number, stations: Station[]): Line[] => {\n  const lines = [];\n  for (let i = 0; i < numLines; i += 1) {\n    let color = tinycolor.random();\n    while (color.isDark()) {\n      color = tinycolor.random();\n    }\n    const stationsWithoutConnections = stations.filter(station =>\n      station.connections.length === 0,\n    );\n    const centralHub = Station.largestStation(stationsWithoutConnections);\n    const line = new Line(`line-${i}`, tinycolor.random());\n    const stationsLeft = stations.slice(0);\n    line.connectStations(centralHub, stationsLeft, [], LINE_CONNECTION_LIMIT);\n    lines.push(line);\n  }\n  return lines;\n};\n\nconst moveTrains = (trains: Train[], stations: Station[]) => {\n  for (const train of trains) {\n    if (train.origin.connections.length === 0) {\n      // train is stuck at an orphaned station\n      continue;\n    }\n    // choose a destination randomly with a bias towards larger stations\n    if (train.destination === undefined) {\n      const otherStations = train.origin.connections.map(conn => conn.station);\n      const closeStationWeights = otherStations.map(station => station.population);\n      train.destination = weightedRandom(otherStations, closeStationWeights);\n\n      // board passengers\n      const boardingPassengers = randomInt(0, Math.min(TRAIN_CAPACITY - train.passengers,\n                                                       train.origin.population));\n      // set or mix train color with the color of new passenger origin\n      if (train.passengers === 0) {\n        train.color = train.origin.color;\n      } else {\n        train.color = tinycolor.mix(\n          train.color,\n          train.origin.color,\n          Math.round((boardingPassengers / train.passengers) * 100),\n        );\n      }\n      train.passengers += boardingPassengers;\n      train.origin.population -= boardingPassengers;\n    }\n\n    // train reached destination, stop moving and let passengers off\n    if (pointsAlmostEqual(train.location, train.destination.location)) {\n      train.speed = 0;\n\n      // average destination color with passenger color weighted by ratio\n      // (a simulation of culture mixing)\n      train.destination.color = tinycolor.mix(\n        train.destination.color,\n        train.origin.color,\n        Math.round((train.passengers / train.destination.population) * 100),\n      );\n\n      // transfer passengers to destination\n      const disembarkingPassengers = randomInt(0, train.passengers);\n      train.destination.population += disembarkingPassengers;\n      train.passengers -= disembarkingPassengers;\n\n      // prepare for next journey\n      train.origin = train.destination;\n      train.destination = undefined;\n      continue;\n    }\n\n    const journeyLeft = distance(train.location, train.destination.location);\n\n    if ((train.speed / ACCELERATION) >= ((journeyLeft / train.speed) - APPROACH_DISTANCE) &&\n        train.speed !== ACCELERATION) {\n      // slowing down\n      train.speed -= ACCELERATION;\n    } else if (train.speed < MAX_SPEED) {\n      // speeding up\n      train.speed += ACCELERATION;\n    }\n\n    // advance train\n    const progress = train.speed / journeyLeft;\n    train.location.x += ((train.destination.location.x - train.location.x) * progress);\n    train.location.y += ((train.destination.location.y - train.location.y) * progress);\n  }\n};\n\nconst drawStations = (stations: Station[], graphics: PIXI.Graphics) => {\n  for (const station of stations) {\n    const radius = station.population / 150;\n    graphics.beginFill(parseInt(station.color.toHex(), 16), 0.5);\n    graphics.drawCircle(station.location.x, station.location.y, radius);\n    graphics.endFill();\n    station.label.x = station.location.x + radius + 1;\n    station.label.y = station.location.y + radius + 1;\n  }\n};\n\nconst drawTrains = (trains: Train[], graphics: PIXI.Graphics) => {\n  for (const train of trains) {\n    const trainSize = rangeMap(train.passengers, 0, TRAIN_CAPACITY, 1, 5);\n    const scale = trainSize / NODE_RES;\n    train.sprite.x = train.location.x;\n    train.sprite.y = train.location.y;\n    train.sprite.scale.x = scale;\n    train.sprite.scale.y = scale;\n    train.sprite.tint = parseInt(train.color.toHex(), 16);\n    train.label.x = train.location.x + scale + 1;\n    train.label.y = train.location.y + scale + 1;\n  }\n};\n\nconst drawLines = (stations: Station[], graphics: PIXI.Graphics) => {\n  for (const station of stations) {\n    for (const connection of station.connections) {\n      let twoWay = false;\n      for (const conn of connection.station.connections) {\n        if (conn.station === station) {\n          twoWay = true;\n        }\n      }\n      graphics.lineStyle(twoWay ? 2 : 1, parseInt(connection.line.color.toHex(), 16), 1);\n      graphics.moveTo(station.location.x, station.location.y);\n      graphics.lineTo(connection.station.location.x, connection.station.location.y);\n    }\n  }\n};\n\nconst run = () => {\n  const app = new PIXI.Application({\n    antialias: true,\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n  const viewport = new Viewport({\n    screenHeight: window.innerHeight,\n    screenWidth: window.innerWidth,\n    worldHeight: WORLD_HEIGHT,\n    worldWidth: WORLD_WIDTH,\n  });\n  const stats = new Stats();\n  stats.showPanel(0);\n  document.body.appendChild(stats.dom);\n  const ticker = new PIXI.ticker.Ticker();\n  const graphics = new PIXI.Graphics();\n\n  const stations = initStations(30);\n  const lines = initLines(4, stations);\n  const trains = initTrains(50, stations);\n\n  ticker.stop();\n  ticker.add((deltaTime) => {\n    stats.begin();\n\n    moveTrains(trains, stations);\n\n    graphics.clear();\n\n    graphics.lineStyle(1, 0xFFA500, 1);\n    drawStations(stations, graphics);\n\n    graphics.lineStyle(1, 0xAEAEAE, 1);\n    drawTrains(trains, graphics);\n\n    drawLines(stations, graphics);\n\n    stats.end();\n  });\n  ticker.start();\n\n  viewport.addChild(graphics);\n  // add train sprites\n  for (const train of trains) {\n    viewport.addChild(train.sprite);\n  }\n  // Add debug labels\n  for (const train of trains) {\n    viewport.addChild(train.label);\n  }\n  for (const station of stations) {\n    viewport.addChild(station.label);\n  }\n  document.body.appendChild(app.view);\n  app.stage.addChild(viewport);\n  viewport.drag().pinch().wheel().clampZoom({\n    maxHeight: ZOOM_MAX_HEIGHT,\n    maxWidth: ZOOM_MAX_WIDTH,\n    minHeight: ZOOM_MIN_HEIGHT,\n    minWidth: ZOOM_MIN_WIDTH,\n  }).decelerate();\n\n  window.addEventListener('resize', () => {\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n  });\n};\n\nPIXI.loader.add('nodeImg', imgNode).load(run);\n"],"sourceRoot":""}